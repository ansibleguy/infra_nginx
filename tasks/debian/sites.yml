---

# todo: option for security.txt

# is an additional site-loop since certificates can be pre-/absent
- name: Nginx | Debian | Getting certificates using LetsEncrypt
  ansible.builtin.include_role:
    name: ansibleguy.infra_certs
  when:
    - site.ssl.mode == 'letsencrypt'
    - site.domain is defined
  vars:
    site: "{{ defaults_site | combine(site_item.value, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
    certs:
      mode: 'le_certbot'
      path: "{{ NGINX_CONFIG.ssl.path }}"
      owner_key: "{{ NGINX_CONFIG.user }}"
      group_key: "{{ NGINX_CONFIG.group }}"
      owner_cert: "{{ NGINX_CONFIG.user }}"
      group_cert: "{{ NGINX_CONFIG.group }}"
      letsencrypt:
        certs: "{{ site | prepare_letsencrypt(name) }}"
        path: "{{ NGINX_CONFIG.letsencrypt.path }}"
        email: "{{ NGINX_CONFIG.letsencrypt.email }}"
        renew_timer: "{{ NGINX_CONFIG.letsencrypt.renew_timer }}"
        verbosity: "{{ NGINX_CONFIG.letsencrypt.verbosity }}"
        service: 'nginx'
        renew: "{{ NGINX_CONFIG.letsencrypt.renew }}"
        state: "{{ site_item.value.state | default(defaults_site.state) }}"
  loop_control:
    loop_var: site_item
  with_dict: "{{ NGINX_CONFIG.sites }}"
  no_log: true
  tags: [certs, letsencrypt]

- name: Nginx | Debian | Removing site
  ansible.builtin.include_tasks: rm_site.yml
  when: site.state != 'present'
  vars:
    site: "{{ defaults_site | combine(site_item.value, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  loop_control:
    loop_var: site_item
  with_dict: "{{ NGINX_CONFIG.sites }}"
  no_log: true
  tags: [config, sites, certs]

- name: Nginx | Debian | Reloading nginx
  ansible.builtin.systemd:
    name: 'nginx.service'
    state: reloaded
  changed_when: false
  tags: [base, config, sites, certs]

- name: Nginx | Debian | Adding status page
  ansible.builtin.include_tasks: add_status.yml
  when: NGINX_CONFIG.status_page.state == 'present'
  tags: [base, config, sites]

- name: Nginx | Debian | Adding site
  ansible.builtin.include_tasks: add_site.yml
  when: site.state == 'present'
  vars:
    site: "{{ defaults_site | combine(site_item.value, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  loop_control:
    loop_var: site_item
  with_dict: "{{ NGINX_CONFIG.sites }}"
  no_log: true
  tags: [config, sites, certs]
