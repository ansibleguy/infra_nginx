---

# todo: option for security.txt

- name: Nginx | Checking certificate config
  ansible.builtin.set_fact:
    ng_letsencrypt_certs: "{{ NGINX_CONFIG.sites | prepare_letsencrypt(NGINX_CONFIG.state | default(defaults_site.state),
    NGINX_CONFIG.letsencrypt.email, only_site | default(none)) }}"
  tags: [certs, letsencrypt]

- name: Nginx | Getting certificates using LetsEncrypt
  ansible.builtin.include_role:
    name: ansibleguy.infra_certs
  when: ng_letsencrypt_certs | length > 0
  vars:
    certs:
      mode: 'le_certbot'
      path: "{{ NGINX_CONFIG.ssl.path }}"
      owner_key: "{{ NGINX_CONFIG.user }}"
      group_key: "{{ NGINX_CONFIG.group }}"
      owner_cert: "{{ NGINX_CONFIG.user }}"
      group_cert: "{{ NGINX_CONFIG.group }}"
      letsencrypt:
        certs: "{{ ng_letsencrypt_certs }}"
        path: "{{ NGINX_CONFIG.letsencrypt.path }}"
        renew_timer: "{{ NGINX_CONFIG.letsencrypt.renew_timer }}"
        verbosity: "{{ NGINX_CONFIG.letsencrypt.verbosity }}"
        service: 'nginx'
        renew: "{{ NGINX_CONFIG.letsencrypt.renew }}"
  no_log: true
  tags: [certs, letsencrypt]
  args:
    apply:
      tags: [certs, letsencrypt]

- name: Nginx | Removing site
  ansible.builtin.include_tasks: rm_site.yml
  when: >
    site.state != 'present' and
    (only_site is undefined or
    only_site | safe_key == name or
    only_site | safe_key in name or
    name in only_site | safe_key)
  vars:
    site: "{{ defaults_site | combine(site_item.value, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  loop_control:
    loop_var: site_item
  with_dict: "{{ NGINX_CONFIG.sites }}"
  no_log: true
  tags: [config, sites, certs, auth]
  args:
    apply:
      tags: [config, sites, certs]

- name: Nginx | Reloading nginx
  ansible.builtin.systemd:
    name: 'nginx.service'
    state: reloaded
  changed_when: false
  tags: [base, config, sites, certs]

- name: Nginx | Adding status page
  ansible.builtin.include_tasks: add_status.yml
  when: NGINX_CONFIG.status_page.state == 'present'
  tags: [base, config, sites]
  args:
    apply:
      tags: [base, config, sites]

- name: Nginx | Adding site
  ansible.builtin.include_tasks: add_site.yml
  when: >
    site.state == 'present' and
    (only_site is undefined or
    only_site | safe_key == name or
    only_site | safe_key in name or
    name in only_site | safe_key)
  vars:
    site: "{{ defaults_site | combine(site_item.value, recursive=true) }}"
    name: "{{ site_item.key | safe_key }}"
  loop_control:
    loop_var: site_item
  with_dict: "{{ NGINX_CONFIG.sites }}"
  no_log: true
  tags: [config, sites, certs, auth]
  args:
    apply:
      tags: [config, sites]
